/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id "org.hidetake.ssh" version "2.11.2"
    id 'war'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api libs.jakarta.servlet.jsp.jstl.jakarta.servlet.jsp.jstl.api
    api libs.org.glassfish.web.jakarta.servlet.jsp.jstl
    api libs.jakarta.mail.jakarta.mail.api
    api libs.org.apache.commons.commons.dbcp2
    api libs.com.mysql.mysql.connector.j
    api libs.org.eclipse.angus.angus.mail
    testImplementation libs.org.junit.jupiter.junit.jupiter.api
    testImplementation libs.org.junit.jupiter.junit.jupiter.engine
    libs.jakarta.servlet.jakarta.servlet.api
    implementation 'at.favre.lib:bcrypt:0.9.0'

    // Google OAuth dependencies
    implementation 'com.google.api-client:google-api-client:2.2.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.http-client:google-http-client-gson:1.43.3'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation("com.google.code.gson:gson:2.13.1")
}

group = 'com.example'
version = '1.0-SNAPSHOT'
description = 'demo'
java.sourceCompatibility = JavaVersion.VERSION_15

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

apply plugin: 'org.hidetake.ssh'
remotes {
    host {
        host = '192.168.127.128'
        user = 'root'
        password = "1111"
    }
}
ssh.settings {
    knownHosts = allowAnyHosts
}
task docker_app_start {
    doLast {
        println 'begin docker_app_start'
        ssh.run {
            session(remotes.host) {
                execute 'docker stop tomcat10', ignoreError: true
                execute 'docker run -it --rm -d ' +
                        '--name tomcat10 ' +
                        '-v /usr/deploy:/usr/local/tomcat/webapps ' +
                        '-p 80:8080 ' +
                        'tomcat:10.0&'
            }
        }
    }
}

task docker_upload_file_to_server {
    doLast {
        println 'begin docker_upload_file_to_server'
        ssh.run {
            session(remotes.host) {
                remove '/usr/deploy/lab.war'
                remove '/usr/deploy/lab/'
                put from: "${project.projectDir}/build/libs/demo-1.0-SNAPSHOT.war",
                        into: "/usr/deploy/lab.war"
            }
        }
    }
}

task docker_deploy {
    docker_deploy.dependsOn docker_app_start
    docker_deploy.dependsOn docker_upload_file_to_server
    docker_deploy.dependsOn build
    tasks.getByName('docker_app_start').mustRunAfter docker_upload_file_to_server
}
